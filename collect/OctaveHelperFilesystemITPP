#!/usr/bin/python
import sys
import string

def CheckIfString(v):
    for l in string.letters:
        if l in v:
            return True
    return False

def ReadFunctionSignature(FilenameMat):
	f = open(FilenameMat)
	l = ""
	while not l.startswith("function "):
		l = f.readline()
		if not f:
			print "function nicht gefunden"
			sys.exit(-1)
	Sig = l.replace("(","*").replace(")","*").split("*")[1].replace(" ","")
	return [Sig, Sig.split(",")]

def ExtractArgs(Args):
	VecArgs = list()
	for a in Args:
		VecArgs.append(a.split("=")[0])
	return VecArgs
		
import sys, os

verbose = False
MatApp = "octave -q --eval \""

Args = sys.argv
VecArgs = ExtractArgs(Args[2:])

try:
	NameFileResult = Args[1].split("NameFileResult=")[1]
except:
	print "Error: The first parameter has to be NameFileResult"
	sys.exit(-1)

FilenameMat = Args[0] + ".m"
[CommasepSig, VecSig] = ReadFunctionSignature(FilenameMat)

VecArgs.append("NameFileResult")
if not sorted(VecSig) == sorted(VecArgs):
	print "Signatures do not match"
	print "We require: " + " ".join(sorted(VecSig[:len(VecSig)-1]))
	print "You specified: " + " ".join(sorted(VecArgs[:len(VecArgs)-1]))
	print "We require: " + " ".join(VecSig)
	print "You specified: " + " ".join(VecArgs)
	sys.exit(-1)

Filename = Args[0].split("/")
Filename = Filename[len(Filename)-1]
Basename = os.path.dirname(__file__)


for Idx in range(len(Args)-1):
    Cur = Args[1+Idx]
    PosEq = Cur.find("=")
    Name = Cur[0:PosEq]
    Value = Cur[PosEq+1:]
    if CheckIfString(Value):
        Args[1+Idx] = Name + "=\'" + Value + "\'"

Variables = ";".join(Args[1:])

Cmd = "cd " + Basename + ";" + MatApp + "addpath('" + os.path.expanduser("~/Dissertation/libgjm") + "');" + Variables + ";" + Filename + "(" + CommasepSig + ");exit\""
if verbose:
	print "Cmd: " + Cmd

P = NameFileResult[0:NameFileResult.rfind("/")]
if not os.path.exists(P):
	os.makedirs(P)
if not os.path.exists(NameFileResult):
	open(NameFileResult, 'w').close() 
	os.system(Cmd)
else:
	if verbose:
		print "Resultfile was create before"
